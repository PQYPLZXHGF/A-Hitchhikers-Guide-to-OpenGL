%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 811 95
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Friday, January 29, 2016 9:32:29 AM CET
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
811 95 setpagesize
0 0 0 0 setmargins
0 0 setorigin
811 95 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
811.000 0.00000 l
811.000 95.0000 l
0.00000 95.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
811.000 0.00000 l
811.000 95.0000 l
0.00000 95.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 811 95 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -417.000 -245.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
417.000 245.000 m
1228.00 245.000 l
1228.00 340.000 l
417.000 340.000 l
417.000 245.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -417.000 -245.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -417.000 -245.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -417.000 -245.000 ] defaultmatrix matrix concatmatrix setmatrix
0 J
1.45000 M
newpath
432.000 260.000 m
445.000 260.000 l
445.000 290.000 l
432.000 290.000 l
432.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
445.000 260.000 m
458.000 260.000 l
458.000 290.000 l
445.000 290.000 l
445.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
458.000 260.000 m
471.000 260.000 l
471.000 290.000 l
458.000 290.000 l
458.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
471.000 260.000 m
484.000 260.000 l
484.000 290.000 l
471.000 290.000 l
471.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
484.000 260.000 m
497.000 260.000 l
497.000 290.000 l
484.000 290.000 l
484.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
497.000 260.000 m
510.000 260.000 l
510.000 290.000 l
497.000 290.000 l
497.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
510.000 260.000 m
523.000 260.000 l
523.000 290.000 l
510.000 290.000 l
510.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
523.000 260.000 m
536.000 260.000 l
536.000 290.000 l
523.000 290.000 l
523.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
536.000 260.000 m
549.000 260.000 l
549.000 290.000 l
536.000 290.000 l
536.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
549.000 260.000 m
562.000 260.000 l
562.000 290.000 l
549.000 290.000 l
549.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
562.000 260.000 m
575.000 260.000 l
575.000 290.000 l
562.000 290.000 l
562.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
575.000 260.000 m
588.000 260.000 l
588.000 290.000 l
575.000 290.000 l
575.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
454.594 314.714 m
456.859 311.479 l
454.766 308.495 l
456.078 308.495 l
457.031 309.948 l
457.208 310.229 457.354 310.464 457.469 310.651  c
457.635 310.391 457.792 310.162 457.938 309.964  c
458.984 308.495 l
460.250 308.495 l
458.094 311.417 l
460.406 314.714 l
459.125 314.714 l
457.844 312.776 l
457.500 312.261 l
455.859 314.714 l
454.594 314.714 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
508.250 317.104 m
508.125 316.120 l
508.354 316.183 508.557 316.214 508.734 316.214  c
508.964 316.214 509.148 316.175 509.289 316.097  c
509.430 316.019 509.547 315.912 509.641 315.776  c
509.703 315.662 509.812 315.396 509.969 314.979  c
509.979 314.927 510.010 314.844 510.062 314.729  c
507.688 308.495 l
508.828 308.495 l
510.125 312.089 l
510.292 312.547 510.443 313.032 510.578 313.542  c
510.703 313.052 510.849 312.578 511.016 312.120  c
512.344 308.495 l
513.391 308.495 l
511.031 314.823 l
510.771 315.500 510.573 315.969 510.438 316.229  c
510.250 316.584 510.034 316.841 509.789 317.003  c
509.544 317.164 509.255 317.245 508.922 317.245  c
508.724 317.245 508.500 317.198 508.250 317.104  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
559.734 314.714 m
559.734 313.854 l
563.703 309.308 l
563.245 309.328 562.844 309.339 562.500 309.339  c
559.969 309.339 l
559.969 308.495 l
565.062 308.495 l
565.062 309.183 l
561.688 313.136 l
561.031 313.854 l
561.510 313.823 561.953 313.808 562.359 313.808  c
565.250 313.808 l
565.250 314.714 l
559.734 314.714 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
588.000 260.000 m
601.000 260.000 l
601.000 290.000 l
588.000 290.000 l
588.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
601.000 260.000 m
614.000 260.000 l
614.000 290.000 l
601.000 290.000 l
601.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
614.000 260.000 m
627.000 260.000 l
627.000 290.000 l
614.000 290.000 l
614.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
627.000 260.000 m
640.000 260.000 l
640.000 290.000 l
627.000 290.000 l
627.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
640.000 260.000 m
653.000 260.000 l
653.000 290.000 l
640.000 290.000 l
640.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
653.000 260.000 m
666.000 260.000 l
666.000 290.000 l
653.000 290.000 l
653.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
666.000 260.000 m
679.000 260.000 l
679.000 290.000 l
666.000 290.000 l
666.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
679.000 260.000 m
692.000 260.000 l
692.000 290.000 l
679.000 290.000 l
679.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
615.038 314.714 m
615.038 313.792 l
614.549 314.500 613.887 314.854 613.054 314.854  c
612.689 314.854 612.348 314.784 612.030 314.644  c
611.713 314.503 611.476 314.326 611.319 314.112  c
611.163 313.899 611.054 313.636 610.991 313.323  c
610.950 313.125 610.929 312.797 610.929 312.339  c
610.929 308.495 l
611.991 308.495 l
611.991 311.948 l
611.991 312.490 612.012 312.860 612.054 313.058  c
612.116 313.328 612.254 313.545 612.468 313.706  c
612.681 313.868 612.950 313.948 613.272 313.948  c
613.585 313.948 613.879 313.868 614.155 313.706  c
614.431 313.545 614.629 313.323 614.749 313.042  c
614.869 312.761 614.929 312.354 614.929 311.823  c
614.929 308.495 l
615.976 308.495 l
615.976 314.714 l
615.038 314.714 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
666.016 314.714 m
663.656 308.495 l
664.766 308.495 l
666.109 312.214 l
666.245 312.620 666.375 313.037 666.500 313.464  c
666.594 313.141 666.724 312.750 666.891 312.292  c
668.281 308.495 l
669.359 308.495 l
667.000 314.714 l
666.016 314.714 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
692.000 260.000 m
705.000 260.000 l
705.000 290.000 l
692.000 290.000 l
692.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
705.000 260.000 m
718.000 260.000 l
718.000 290.000 l
705.000 290.000 l
705.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
718.000 260.000 m
731.000 260.000 l
731.000 290.000 l
718.000 290.000 l
718.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
731.000 260.000 m
744.000 260.000 l
744.000 290.000 l
731.000 290.000 l
731.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
744.000 260.000 m
757.000 260.000 l
757.000 290.000 l
744.000 290.000 l
744.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
757.000 260.000 m
770.000 260.000 l
770.000 290.000 l
757.000 290.000 l
757.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
770.000 260.000 m
783.000 260.000 l
783.000 290.000 l
770.000 290.000 l
770.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
783.000 260.000 m
796.000 260.000 l
796.000 290.000 l
783.000 290.000 l
783.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
796.000 260.000 m
809.000 260.000 l
809.000 290.000 l
796.000 290.000 l
796.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
809.000 260.000 m
822.000 260.000 l
822.000 290.000 l
809.000 290.000 l
809.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
822.000 260.000 m
835.000 260.000 l
835.000 290.000 l
822.000 290.000 l
822.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
835.000 260.000 m
848.000 260.000 l
848.000 290.000 l
835.000 290.000 l
835.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
714.594 314.714 m
716.859 311.479 l
714.766 308.495 l
716.078 308.495 l
717.031 309.948 l
717.208 310.229 717.354 310.464 717.469 310.651  c
717.635 310.391 717.792 310.162 717.938 309.964  c
718.984 308.495 l
720.250 308.495 l
718.094 311.417 l
720.406 314.714 l
719.125 314.714 l
717.844 312.776 l
717.500 312.261 l
715.859 314.714 l
714.594 314.714 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
768.250 317.104 m
768.125 316.120 l
768.354 316.183 768.557 316.214 768.734 316.214  c
768.964 316.214 769.148 316.175 769.289 316.097  c
769.430 316.019 769.547 315.912 769.641 315.776  c
769.703 315.662 769.812 315.396 769.969 314.979  c
769.979 314.927 770.010 314.844 770.062 314.729  c
767.688 308.495 l
768.828 308.495 l
770.125 312.089 l
770.292 312.547 770.443 313.032 770.578 313.542  c
770.703 313.052 770.849 312.578 771.016 312.120  c
772.344 308.495 l
773.391 308.495 l
771.031 314.823 l
770.771 315.500 770.573 315.969 770.438 316.229  c
770.250 316.584 770.034 316.841 769.789 317.003  c
769.544 317.164 769.255 317.245 768.922 317.245  c
768.724 317.245 768.500 317.198 768.250 317.104  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
819.734 314.714 m
819.734 313.854 l
823.703 309.308 l
823.245 309.328 822.844 309.339 822.500 309.339  c
819.969 309.339 l
819.969 308.495 l
825.062 308.495 l
825.062 309.183 l
821.688 313.136 l
821.031 313.854 l
821.510 313.823 821.953 313.808 822.359 313.808  c
825.250 313.808 l
825.250 314.714 l
819.734 314.714 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
848.000 260.000 m
861.000 260.000 l
861.000 290.000 l
848.000 290.000 l
848.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
861.000 260.000 m
874.000 260.000 l
874.000 290.000 l
861.000 290.000 l
861.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
874.000 260.000 m
887.000 260.000 l
887.000 290.000 l
874.000 290.000 l
874.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
887.000 260.000 m
900.000 260.000 l
900.000 290.000 l
887.000 290.000 l
887.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
900.000 260.000 m
913.000 260.000 l
913.000 290.000 l
900.000 290.000 l
900.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
913.000 260.000 m
926.000 260.000 l
926.000 290.000 l
913.000 290.000 l
913.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
926.000 260.000 m
939.000 260.000 l
939.000 290.000 l
926.000 290.000 l
926.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
939.000 260.000 m
952.000 260.000 l
952.000 290.000 l
939.000 290.000 l
939.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
875.038 314.714 m
875.038 313.792 l
874.549 314.500 873.887 314.854 873.054 314.854  c
872.689 314.854 872.348 314.784 872.030 314.644  c
871.713 314.503 871.476 314.326 871.319 314.112  c
871.163 313.899 871.054 313.636 870.991 313.323  c
870.950 313.125 870.929 312.797 870.929 312.339  c
870.929 308.495 l
871.991 308.495 l
871.991 311.948 l
871.991 312.490 872.012 312.860 872.054 313.058  c
872.116 313.328 872.254 313.545 872.468 313.706  c
872.681 313.868 872.950 313.948 873.272 313.948  c
873.585 313.948 873.879 313.868 874.155 313.706  c
874.431 313.545 874.629 313.323 874.749 313.042  c
874.869 312.761 874.929 312.354 874.929 311.823  c
874.929 308.495 l
875.976 308.495 l
875.976 314.714 l
875.038 314.714 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
926.016 314.714 m
923.656 308.495 l
924.766 308.495 l
926.109 312.214 l
926.245 312.620 926.375 313.037 926.500 313.464  c
926.594 313.141 926.724 312.750 926.891 312.292  c
928.281 308.495 l
929.359 308.495 l
927.000 314.714 l
926.016 314.714 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
952.000 260.000 m
965.000 260.000 l
965.000 290.000 l
952.000 290.000 l
952.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
965.000 260.000 m
978.000 260.000 l
978.000 290.000 l
965.000 290.000 l
965.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
978.000 260.000 m
991.000 260.000 l
991.000 290.000 l
978.000 290.000 l
978.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
991.000 260.000 m
1004.00 260.000 l
1004.00 290.000 l
991.000 290.000 l
991.000 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1004.00 260.000 m
1017.00 260.000 l
1017.00 290.000 l
1004.00 290.000 l
1004.00 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1017.00 260.000 m
1030.00 260.000 l
1030.00 290.000 l
1017.00 290.000 l
1017.00 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1030.00 260.000 m
1043.00 260.000 l
1043.00 290.000 l
1030.00 290.000 l
1030.00 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1043.00 260.000 m
1056.00 260.000 l
1056.00 290.000 l
1043.00 290.000 l
1043.00 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1056.00 260.000 m
1069.00 260.000 l
1069.00 290.000 l
1056.00 290.000 l
1056.00 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1069.00 260.000 m
1082.00 260.000 l
1082.00 290.000 l
1069.00 290.000 l
1069.00 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1082.00 260.000 m
1095.00 260.000 l
1095.00 290.000 l
1082.00 290.000 l
1082.00 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1095.00 260.000 m
1108.00 260.000 l
1108.00 290.000 l
1095.00 290.000 l
1095.00 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
974.594 314.714 m
976.859 311.479 l
974.766 308.495 l
976.078 308.495 l
977.031 309.948 l
977.208 310.229 977.354 310.464 977.469 310.651  c
977.635 310.391 977.792 310.162 977.938 309.964  c
978.984 308.495 l
980.250 308.495 l
978.094 311.417 l
980.406 314.714 l
979.125 314.714 l
977.844 312.776 l
977.500 312.261 l
975.859 314.714 l
974.594 314.714 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
1028.25 317.104 m
1028.12 316.120 l
1028.35 316.183 1028.56 316.214 1028.73 316.214  c
1028.96 316.214 1029.15 316.175 1029.29 316.097  c
1029.43 316.019 1029.55 315.912 1029.64 315.776  c
1029.70 315.662 1029.81 315.396 1029.97 314.979  c
1029.98 314.927 1030.01 314.844 1030.06 314.729  c
1027.69 308.495 l
1028.83 308.495 l
1030.12 312.089 l
1030.29 312.547 1030.44 313.032 1030.58 313.542  c
1030.70 313.052 1030.85 312.578 1031.02 312.120  c
1032.34 308.495 l
1033.39 308.495 l
1031.03 314.823 l
1030.77 315.500 1030.57 315.969 1030.44 316.229  c
1030.25 316.584 1030.03 316.841 1029.79 317.003  c
1029.54 317.164 1029.26 317.245 1028.92 317.245  c
1028.72 317.245 1028.50 317.198 1028.25 317.104  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
1079.73 314.714 m
1079.73 313.854 l
1083.70 309.308 l
1083.24 309.328 1082.84 309.339 1082.50 309.339  c
1079.97 309.339 l
1079.97 308.495 l
1085.06 308.495 l
1085.06 309.183 l
1081.69 313.136 l
1081.03 313.854 l
1081.51 313.823 1081.95 313.808 1082.36 313.808  c
1085.25 313.808 l
1085.25 314.714 l
1079.73 314.714 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
1108.00 260.000 m
1121.00 260.000 l
1121.00 290.000 l
1108.00 290.000 l
1108.00 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1121.00 260.000 m
1134.00 260.000 l
1134.00 290.000 l
1121.00 290.000 l
1121.00 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1134.00 260.000 m
1147.00 260.000 l
1147.00 290.000 l
1134.00 290.000 l
1134.00 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1147.00 260.000 m
1160.00 260.000 l
1160.00 290.000 l
1147.00 290.000 l
1147.00 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1160.00 260.000 m
1173.00 260.000 l
1173.00 290.000 l
1160.00 290.000 l
1160.00 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1173.00 260.000 m
1186.00 260.000 l
1186.00 290.000 l
1173.00 290.000 l
1173.00 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1186.00 260.000 m
1199.00 260.000 l
1199.00 290.000 l
1186.00 290.000 l
1186.00 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1199.00 260.000 m
1212.00 260.000 l
1212.00 290.000 l
1199.00 290.000 l
1199.00 260.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1135.04 314.714 m
1135.04 313.792 l
1134.55 314.500 1133.89 314.854 1133.05 314.854  c
1132.69 314.854 1132.35 314.784 1132.03 314.644  c
1131.71 314.503 1131.48 314.326 1131.32 314.112  c
1131.16 313.899 1131.05 313.636 1130.99 313.323  c
1130.95 313.125 1130.93 312.797 1130.93 312.339  c
1130.93 308.495 l
1131.99 308.495 l
1131.99 311.948 l
1131.99 312.490 1132.01 312.860 1132.05 313.058  c
1132.12 313.328 1132.25 313.545 1132.47 313.706  c
1132.68 313.868 1132.95 313.948 1133.27 313.948  c
1133.58 313.948 1133.88 313.868 1134.16 313.706  c
1134.43 313.545 1134.63 313.323 1134.75 313.042  c
1134.87 312.761 1134.93 312.354 1134.93 311.823  c
1134.93 308.495 l
1135.98 308.495 l
1135.98 314.714 l
1135.04 314.714 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
1186.02 314.714 m
1183.66 308.495 l
1184.77 308.495 l
1186.11 312.214 l
1186.24 312.620 1186.38 313.037 1186.50 313.464  c
1186.59 313.141 1186.72 312.750 1186.89 312.292  c
1188.28 308.495 l
1189.36 308.495 l
1187.00 314.714 l
1186.02 314.714 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
451.000 310.000 m
432.000 310.000 l
432.000 290.005 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
464.000 310.000 m
484.000 310.000 l
484.000 275.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
504.000 310.000 m
484.000 310.000 l
484.000 284.644 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
517.000 310.000 m
536.000 310.000 l
536.000 275.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
556.000 310.000 m
536.500 310.000 l
536.500 290.005 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
569.000 310.000 m
588.000 310.000 l
588.000 275.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
607.000 310.000 m
588.000 310.000 l
588.000 290.005 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
620.000 310.000 m
640.000 310.000 l
640.000 275.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
660.000 310.000 m
640.000 310.000 l
640.000 284.644 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
673.000 310.000 m
692.000 310.000 l
692.000 275.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
711.000 310.000 m
692.000 310.000 l
692.000 290.005 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
724.000 310.000 m
744.000 310.000 l
744.000 275.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
764.000 310.000 m
744.000 310.000 l
744.000 284.644 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
777.000 310.000 m
796.000 310.000 l
796.000 275.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
816.000 310.000 m
796.500 310.000 l
796.500 290.005 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
829.000 310.000 m
848.000 310.000 l
848.000 275.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
867.000 310.000 m
848.000 310.000 l
848.000 290.005 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
880.000 310.000 m
900.000 310.000 l
900.000 275.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
920.000 310.000 m
900.000 310.000 l
900.000 284.644 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
933.000 310.000 m
952.000 310.000 l
952.000 275.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
971.000 310.000 m
952.000 310.000 l
952.000 290.005 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
984.000 310.000 m
1004.00 310.000 l
1004.00 275.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1024.00 310.000 m
1004.00 310.000 l
1004.00 284.644 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1037.00 310.000 m
1056.00 310.000 l
1056.00 275.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1076.00 310.000 m
1056.50 310.000 l
1056.50 290.005 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1089.00 310.000 m
1108.00 310.000 l
1108.00 275.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1127.00 310.000 m
1108.00 310.000 l
1108.00 290.005 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1140.00 310.000 m
1160.00 310.000 l
1160.00 275.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1180.00 310.000 m
1160.00 310.000 l
1160.00 284.644 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
1193.00 310.000 m
1212.00 310.000 l
1212.00 275.000 l
S
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
